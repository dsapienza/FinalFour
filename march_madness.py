import sys
import csv
import subprocess as sp
import pymysql
import MMPrintFuncs
import FinalFour
from Globals import *
from sendfile import send_mail

def launch_menu(ff):
  
    rgns = ff.get_region_info()
    MMPrintFuncs.print_bracket(rgns)

    print """\n\n MARCH MADNESS MENU
     \t1. Print Bracket
     \t2. Enter Votes
     \t3. Show Final Scores
     \t4. Display Current Selections
     \t5. Clear Current Selections
     \t6. Create Selections
     \t7. Send email
     \t8. Generate random final four
     \tx. Exit
    """
    selection = raw_input("What would you like to do? Please enter a number: ")

    if selection == '1':
        sp.call('clear',shell=True)
        print "Printing bracket ...."
        MMPrintFuncs.print_bracket(rgns)
        launch_menu(ff)
    elif selection == '2':
        verifyUser(ff)
        launch_menu(ff)
    elif selection == '3':
        print "Printing Final Score Assignments"
    elif selection == '4':
        print "Current selections:"
	with open('finalfour.csv', 'rb') as f:
		reader = csv.reader(f)
		for row in reader:
			print row
        raw_input("Press enter to return to menu")
        launch_menu(ff)
    elif selection == '5':
        print "Clearing Current selections:"
        clear_selection_all()
        raw_input("Press enter to return to menu")
        launch_menu(ff)
    elif selection == '6':
        print "Generating selections:"
        while len(allFinalFours) < numofpicks:
                ff.generate_ff_combo()
	# Display for testing only?
        for i in sorted(allFinalFours):
                print i
        ff.addtofile(filename1, allFinalFours)
        ff.addtofile(filename2, allFinalFoursNums)
        raw_input("Press enter to return to menu")
        launch_menu(ff)
    elif selection == '7':
	#write to db
	print "Sending email to: %s" % email_list
        send_mail('daniel.sapienza@gmail.com', email_list, 'March Madness', 'Autogenerated Pick')
    elif selection == '8':
	print "Generating 1 new final four combination"
	ff.generate_ff_combo()
	ff.addtofile(filename1, allFinalFours)
	ff.addtofile(filename2, allFinalFoursNums)
	launch_menu(ff)
    elif selection == 'x':
        print "Goodbye"
    else:
        print "Not a valid selection. Please try again."
	launch_menu(ff)

def verifyUser(ff):
    un = raw_input("\nPlease enter your name: ").upper()
    # If user doesn't exist in March_Madness.User table, create it
    user_query = "SELECT * FROM March_Madness.users as U WHERE user = '%s' " % un
    cursr = conn.cursor()
    cursr.execute(user_query)
    if not cursr.fetchone():
        last_user_num = cursr.lastrowid
        last_user_num += 1
        print "User doesn't exists; Creating user now"
        insert_user = "INSERT INTO March_Madness.users (user) VALUES ('%s')" % un
        cursr.execute(insert_user)
        conn.commit()
        print "User created!!"
    else:
        print "User verified!"
    # If user already voted, remove previous choices
    return addVotes(un, ff)

def addVotes(username, ff):
    MMPrintFuncs.print_regions(ff.get_region_info())
    reg_sel = raw_input("Which region are you entering the votes for?  \n\tEnter EXIT to go back to the menu \n").upper()
    if reg_sel != "EXIT":
        # Check to make sure the region exists
        print MMPrintFuncs.print_teams_by_region(reg_sel)
        teams_ranked = []
        total_teams = 4
        tally = 4
        while len(teams_ranked) < total_teams:
            team = raw_input("Enter a school name from the list above: \n")
            if verifyTeam(team):
            # Add a check to make sure the team could be a potential winner
	        teams_ranked.append(team)
	        add_vote_statement = "INSERT INTO March_Madness.ranks (user, region, school, votes) VALUES ('%s','%s','%s','%s') " % (username, reg_sel, team, tally)
                cursr = conn.cursor()
	        cursr.execute(add_vote_statement)
                conn.commit()
	        tally = tally - 1
    else:
        print "Exiting"
        return
    addVotes(username, ff)
    return

def verifyTeam(team):
    tq = "SELECT school from March_Madness.teams WHERE school = '%s'" % team
    cursr = conn.cursor()
    cursr.execute(tq)
    result = cursr.fetchone()
    if result is not None:
        return True
    else:
        print "Invalid school name"
        return False

# Not in use yet, should combine with all option
def clear_selection_for_user(usr):
    clear_query = "DELETE FROM March_Madness.ranks WHERE user = %s" % usr
    cursr = conn.cursor()
    cursr.execute(clear_query)
    conn.commit()

def clear_selection_all():
    clear_query = "DELETE FROM March_Madness.ranks "
    print clear_query
    cursr = conn.cursor()
    cursr.execute(clear_query)
    conn.commit()

if __name__ == '__main__':
    ff = FinalFour.FinalFour()
    launch_menu(ff)
